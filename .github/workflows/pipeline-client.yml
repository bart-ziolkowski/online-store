name: ButikDK Client Pipeline

on:
  push:
    branches:
      - ci/pipeline
    paths:
      - online-store-ui/**
      - docker/client/**
      - "docker-compose.yml"
      - .github/workflows/*-client.yml

jobs:
  build-image:
    name: Build Client Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract project version
        id: extract_version
        run: |
          cd online-store-ui
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          cd online-store-ui
          npm install

      - name: Build Docker image with build-args
        run: |
          cd online-store-ui
          docker build \
            --build-arg PAGE_SIZE=${{ secrets.PAGE_SIZE }} \
            --build-arg PRODUCTION=${{ secrets.PRODUCTION }} \
            --build-arg API_URL=${{ secrets.API_URL }} \
            --build-arg API_BASKET_URL=${{ secrets.API_BASKET_URL }} \
            --build-arg KEYCLOAK_URL=${{ secrets.KEYCLOAK_URL }} \
            --build-arg KEYCLOAK_REALM=${{ secrets.KEYCLOAK_REALM }} \
            --build-arg KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }} \
            --build-arg STRIPE_PUBLIC_KEY=${{ secrets.STRIPE_PUBLIC_KEY }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/os-ui:latest \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/os-ui:${{ env.VERSION }} \
            -f docker/client/Dockerfile \
            .

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image to DockerHub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/os-ui:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/os-ui:${{ env.VERSION }}

# TO-DO: set-up laster VPS to use self-hosting
#  deploy:
#    name: Deploy Client
#    runs-on: ubuntu-latest
#    needs: [build-image]
#    steps:
#      - name: Create deployment folder
#        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

#      - name: Copy docker-compose file
#        run: scp -oStrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

#      - name: Set ENV variable and deploy
#        run: |
#          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
#          cd ci-cd
#          docker compose -f docker-compose.yml pull -q
#          docker compose -f docker-compose.yml up -d
#          EOF

#  health-check:
#    name: UI Health Check
#    runs-on: ubuntu-latest
#    needs: [deploy]
#    steps:
#      - name: Check the docker container health status
#        run: |
#          if ! docker ps -a | grep pn
